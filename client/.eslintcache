[{"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\index.js":"1","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\App.js":"2","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Home.js":"3","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Profile.js":"4","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Signup.js":"5","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Login.js":"6","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Footer.js":"7","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Header.js":"8","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\utils\\mutations.js":"9","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\utils\\auth.js":"10"},{"size":268,"mtime":1665947737214,"results":"11","hashOfConfig":"12"},{"size":1597,"mtime":1665956517401,"results":"13","hashOfConfig":"12"},{"size":336,"mtime":1665954491728,"results":"14","hashOfConfig":"12"},{"size":259,"mtime":1665947737215,"results":"15","hashOfConfig":"12"},{"size":9272,"mtime":1665955773442,"results":"16","hashOfConfig":"12"},{"size":3343,"mtime":1665954491727,"results":"17","hashOfConfig":"12"},{"size":348,"mtime":1665954491725,"results":"18","hashOfConfig":"12"},{"size":352,"mtime":1665954491727,"results":"19","hashOfConfig":"12"},{"size":1612,"mtime":1665956032246,"results":"20","hashOfConfig":"12"},{"size":1033,"mtime":1665794529935,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1978xf7",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\index.js",[],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\App.js",["45"],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Home.js",[],["46","47"],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Profile.js",[],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\pages\\Signup.js",["48"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { NEW_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\nimport '../style.css'\n\nconst Signup = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ \n    username: '', \n    email: '', \n    password: '',\n    name: '',\n    lookingForLove: '',\n    lookingForFriends:'',\n    DOB: '',\n    gender: '',\n    orientation: '',\n    location: '',\n    aboutMe: '',\n    interests: '',\n    selfIdentify: '',\n    disability: ''\n    });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [newUser, { error }] = useMutation(NEW_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await newUser({\n        variables: { ...userFormData },\n      });\n      \n      if (!{ data }) {\n        throw new Error('something went wrong!');\n      }\n      Auth.login(data.newUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n        username: '', \n        email: '',\n        name: '', \n        password: '',\n        lookingForLove: '',\n        lookingForFriends:'',\n        DOB: '',\n        gender: '',\n        orientation: '',\n        location: '',\n        aboutMe: '',\n        interests: '',\n        selfIdentify: '',\n        disability: ''\n    });\n  };\n  const mystyle = {\n    color: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Arial\",\n    background: \"gray\",\n  };\n\n  \n  return (\n    <>\n    <div style={mystyle}>\n\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n        <Form.Group >\n          <Form.Label htmlFor='name'>Name:</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your Name'\n            name='name'\n            onChange={handleInputChange}\n            value={userFormData.name}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Name is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group >\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Your Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Minimum of 8 Characters'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForLove'>Are you looking for love?</Form.Label>\n          <Form.Control\n            type='lookingForLove'\n            placeholder='Yes or No'\n            name='lookingForLove'\n            onChange={handleInputChange}\n            value={userFormData.lookingForLove}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Looking for love is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForFriends'>Are you looking for friends?</Form.Label>\n          <Form.Control\n            type='lookingForFriends'\n            placeholder='Yes or No'\n            name='lookingForFriends'\n            onChange={handleInputChange}\n            value={userFormData.lookingForFriends}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Looking for friends is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='DOB'>Date of Birth</Form.Label>\n          <Form.Control\n            type='DOB'\n            placeholder='mm/dd/yyyy'\n            name='DOB'\n            onChange={handleInputChange}\n            value={userFormData.DOB}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Date of Birth is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='gender'>What is your gender?</Form.Label>\n          <Form.Control\n            type='gender'\n            placeholder='Male, Female, Non-binary, Prefer not to respond'\n            name='gender'\n            onChange={handleInputChange}\n            value={userFormData.gender}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Gender is required!</Form.Control.Feedback>\n        </Form.Group>\n\n      <Form.Group>\n          <Form.Label htmlFor='orientation'>Orientation</Form.Label>\n          <Form.Control\n            type='orientation'\n            placeholder='orientation'\n            name='orientation'\n            onChange={handleInputChange}\n            value={userFormData.orientation}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Orientation is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='location'>Where do you live?</Form.Label>\n          <Form.Control\n            type='location'\n            placeholder='City, State'\n            name='location'\n            onChange={handleInputChange}\n            value={userFormData.location}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Location is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='aboutMe'>Tell us About Yourself!</Form.Label>\n          <Form.Control\n            type='aboutMe'\n            placeholder='About Me'\n            name='aboutMe'\n            onChange={handleInputChange}\n            value={userFormData.aboutMe}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>About Me is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='interests'>Tell us about your interests!</Form.Label>\n          <Form.Control\n            type='interests'\n            placeholder='interests'\n            name='interests'\n            onChange={handleInputChange}\n            value={userFormData.interests}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Interests are required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='selfIdentify'>Do you wish to self identify your disabilities?</Form.Label>\n          <Form.Control\n            type='selfIdentify'\n            placeholder='Yes or No'\n            name='selfIdentify'\n            onChange={handleInputChange}\n            value={userFormData.selfIdentify}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>A response to self identify is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='disability'>Disclose your disability if you wish</Form.Label>\n          <Form.Control\n            type='disability'\n            placeholder='disability'\n            name='disability'\n            onChange={handleInputChange}\n            value={userFormData.disability}\n          />\n        </Form.Group>\n\n        <Button\n          disabled={!(userFormData.name && userFormData.username && userFormData.email && userFormData.password && userFormData.lookingForLove && userFormData.lookingForFriends && userFormData.DOB && userFormData.gender && userFormData.orientation && userFormData.location && userFormData.aboutMe && userFormData.interests && userFormData.selfIdentify && userFormData.disability)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      </div>\n    </>\n  );\n};\n\nexport default Signup;","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Login.js",["49"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\n// import { loginUser } from '../utils/API';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Login = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  const mystyle = {\n    color: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Arial\"\n  };\n  const button = {\n    color: \"white\",\n    backgroundColor: \"Gray\",\n    padding: \"10px\",\n    fontFamily: \"Arial\"\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group style={mystyle}>\n        <Button\n          style={button}\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n        </Form.Group>\n\n        <Form.Group style={mystyle} >\n        <Button\n          style={button}\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Not a Member? Register Now\n        </Button>\n        </Form.Group>\n      </Form>\n    </>\n  );\n};\n\nexport default Login;","C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Footer.js",[],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\components\\Header.js",[],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\utils\\mutations.js",[],"C:\\Users\\krspa\\Bootcamp\\connect-able\\client\\src\\utils\\auth.js",[],{"ruleId":"50","severity":1,"message":"51","line":2,"column":50,"nodeType":"52","messageId":"53","endLine":2,"endColumn":54},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"50","severity":1,"message":"58","line":33,"column":21,"nodeType":"52","messageId":"53","endLine":33,"endColumn":26},{"ruleId":"50","severity":1,"message":"58","line":13,"column":19,"nodeType":"52","messageId":"53","endLine":13,"endColumn":24},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]