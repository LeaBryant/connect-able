[{"/Users/leabryant/Desktop/connect-able/client/src/index.js":"1","/Users/leabryant/Desktop/connect-able/client/src/App.js":"2","/Users/leabryant/Desktop/connect-able/client/src/pages/Home.js":"3","/Users/leabryant/Desktop/connect-able/client/src/pages/Signup.js":"4","/Users/leabryant/Desktop/connect-able/client/src/pages/Profile.js":"5","/Users/leabryant/Desktop/connect-able/client/src/components/Nav.js":"6","/Users/leabryant/Desktop/connect-able/client/src/components/Footer.js":"7","/Users/leabryant/Desktop/connect-able/client/src/components/Header.js":"8","/Users/leabryant/Desktop/connect-able/client/src/utils/auth.js":"9","/Users/leabryant/Desktop/connect-able/client/src/components/Login.js":"10","/Users/leabryant/Desktop/connect-able/client/src/utils/mutations.js":"11","/Users/leabryant/Desktop/connect-able/client/src/utils/queries.js":"12"},{"size":268,"mtime":1665949315810,"results":"13","hashOfConfig":"14"},{"size":1597,"mtime":1665979646390,"results":"15","hashOfConfig":"14"},{"size":349,"mtime":1666040632535,"results":"16","hashOfConfig":"14"},{"size":9578,"mtime":1666042009931,"results":"17","hashOfConfig":"14"},{"size":4381,"mtime":1666052698246,"results":"18","hashOfConfig":"14"},{"size":353,"mtime":1666050698648,"results":"19","hashOfConfig":"14"},{"size":251,"mtime":1665975023411,"results":"20","hashOfConfig":"14"},{"size":332,"mtime":1665975023412,"results":"21","hashOfConfig":"14"},{"size":2365,"mtime":1665976111189,"results":"22","hashOfConfig":"14"},{"size":3404,"mtime":1666051165899,"results":"23","hashOfConfig":"14"},{"size":1761,"mtime":1665979646397,"results":"24","hashOfConfig":"14"},{"size":706,"mtime":1665854695204,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"j87s2m",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/leabryant/Desktop/connect-able/client/src/index.js",[],["53","54"],"/Users/leabryant/Desktop/connect-able/client/src/App.js",[],"/Users/leabryant/Desktop/connect-able/client/src/pages/Home.js",[],"/Users/leabryant/Desktop/connect-able/client/src/pages/Signup.js",["55"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { NEW_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\nimport '../style.css'\n\nimport Header from '../components/Header'\nimport Footer from '../components/Footer'\nconst Signup = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ \n    username: '', \n    email: '', \n    password: '',\n    name: '',\n    lookingForLove: '',\n    lookingForFriends:'',\n    DOB: '',\n    gender: '',\n    orientation: '',\n    location: '',\n    aboutMe: '',\n    interests: '',\n    selfIdentify: '',\n    disability: ''\n    });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [newUser, { error }] = useMutation(NEW_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await newUser({\n        variables: { ...userFormData },\n      });\n      \n      if (!{ data }) {\n        throw new Error('something went wrong!');\n      }\n      Auth.login(data.newUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n        username: '', \n        email: '',\n        name: '', \n        password: '',\n        lookingForLove: '',\n        lookingForFriends:'',\n        DOB: '',\n        gender: '',\n        orientation: '',\n        location: '',\n        aboutMe: '',\n        interests: '',\n        selfIdentify: '',\n        disability: ''\n    });\n  };\n  const mystyle = {\n    color: \"Black\",\n    padding: \"10px\",\n    fontFamily: \"Arial\",\n    background: '#ffffff' \n   };\n\n  \n  return (\n    <>\n  <div className=\"body\">\n     <div>\n      <Header />\n      </div>\n  \n    <div className='container p-5 my-5 border' style={mystyle}>\n\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n        <Form.Group >\n          <Form.Label htmlFor='name'>Name:</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your Name'\n            name='name'\n            onChange={handleInputChange}\n            value={userFormData.name}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Name is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group >\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Your Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Minimum of 8 Characters'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForLove'>Are you looking for love?</Form.Label>\n          <Form.Control\n            type='lookingForLove'\n            placeholder='Yes or No'\n            name='lookingForLove'\n            onChange={handleInputChange}\n            value={userFormData.lookingForLove}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Looking for love is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForFriends'>Are you looking for friends?</Form.Label>\n          <Form.Control\n            type='lookingForFriends'\n            placeholder='Yes or No'\n            name='lookingForFriends'\n            onChange={handleInputChange}\n            value={userFormData.lookingForFriends}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Looking for friends is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='DOB'>Date of Birth</Form.Label>\n          <Form.Control\n            type='DOB'\n            placeholder='mm/dd/yyyy'\n            name='DOB'\n            onChange={handleInputChange}\n            value={userFormData.DOB}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Date of Birth is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='gender'>What is your gender?</Form.Label>\n          <Form.Control\n            type='gender'\n            placeholder='Male, Female, Non-binary, Prefer not to respond'\n            name='gender'\n            onChange={handleInputChange}\n            value={userFormData.gender}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Gender is required!</Form.Control.Feedback>\n        </Form.Group>\n\n      <Form.Group>\n          <Form.Label htmlFor='orientation'>Orientation</Form.Label>\n          <Form.Control\n            type='orientation'\n            placeholder='orientation'\n            name='orientation'\n            onChange={handleInputChange}\n            value={userFormData.orientation}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Orientation is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='location'>Where do you live?</Form.Label>\n          <Form.Control\n            type='location'\n            placeholder='City, State'\n            name='location'\n            onChange={handleInputChange}\n            value={userFormData.location}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Location is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='aboutMe'>Tell us About Yourself!</Form.Label>\n          <Form.Control\n            type='aboutMe'\n            placeholder='About Me'\n            name='aboutMe'\n            onChange={handleInputChange}\n            value={userFormData.aboutMe}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>About Me is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='interests'>Tell us about your interests!</Form.Label>\n          <Form.Control\n            type='interests'\n            placeholder='interests'\n            name='interests'\n            onChange={handleInputChange}\n            value={userFormData.interests}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Interests are required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='selfIdentify'>Do you wish to self identify your disabilities?</Form.Label>\n          <Form.Control\n            type='selfIdentify'\n            placeholder='Yes or No'\n            name='selfIdentify'\n            onChange={handleInputChange}\n            value={userFormData.selfIdentify}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>A response to self identify is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='disability'>Disclose your disability if you wish</Form.Label>\n          <Form.Control\n            type='disability'\n            placeholder='disability'\n            name='disability'\n            onChange={handleInputChange}\n            value={userFormData.disability}\n          />\n        </Form.Group>\n\n        <Button\n          className='Button'\n          disabled={!(userFormData.name && userFormData.username && userFormData.email && userFormData.password && userFormData.lookingForLove && userFormData.lookingForFriends && userFormData.DOB && userFormData.gender && userFormData.orientation && userFormData.location && userFormData.aboutMe && userFormData.interests && userFormData.selfIdentify && userFormData.disability)}\n          type='submit'\n          variant='success'\n          href=\"profile\">\n          Submit\n        </Button>\n      </Form>\n      </div>\n     \n      <div>\n      <Footer />\n    </div>\n    </div>\n    </>\n  );\n};\n\nexport default Signup;","/Users/leabryant/Desktop/connect-able/client/src/pages/Profile.js",["56","57","58","59","60"],"/Users/leabryant/Desktop/connect-able/client/src/components/Nav.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Footer.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Header.js",[],"/Users/leabryant/Desktop/connect-able/client/src/utils/auth.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Login.js",["61"],"import React, { useState } from 'react';\nimport { Form, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport Button from 'react-bootstrap/Button';\n\n// import { loginUser } from '../utils/API';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n\nconst Login = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  const mystyle = {\n    color: \"black\",\n    padding: \"5px\",\n    fontFamily: \"Arial\",\n    alignItems: \"center\"\n    };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n            style={{ width: '50%'}} \n            \n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='password'>Password </Form.Label>\n         \n          <Form.Control\n          \n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n            style={{ width: '50%'}} \n\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n         \n        </Form.Group>\n        <Form.Group style={mystyle}>\n        <Button\n          className='Button'          \n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'\n          href=\"profile\"\n       >\n          Submit\n        </Button>\n        </Form.Group>\n        <Form.Group style={mystyle} >\n        <Button\n          className='Button'\n          type='button'\n          variant='link'\n          href=\"signup\"\n          >\n          Not a Member? Register Now\n        </Button>\n        </Form.Group>\n      </Form>\n    </>\n  );\n};\n\nexport default Login;","/Users/leabryant/Desktop/connect-able/client/src/utils/mutations.js",[],"/Users/leabryant/Desktop/connect-able/client/src/utils/queries.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":35,"column":21,"nodeType":"68","messageId":"69","endLine":35,"endColumn":26},{"ruleId":"66","severity":1,"message":"70","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":21},{"ruleId":"66","severity":1,"message":"71","line":20,"column":11,"nodeType":"68","messageId":"69","endLine":20,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":59,"column":96,"nodeType":"74","endLine":59,"endColumn":178},{"ruleId":"72","severity":1,"message":"73","line":71,"column":96,"nodeType":"74","endLine":71,"endColumn":178},{"ruleId":"72","severity":1,"message":"73","line":77,"column":58,"nodeType":"74","endLine":77,"endColumn":226},{"ruleId":"66","severity":1,"message":"67","line":15,"column":19,"nodeType":"68","messageId":"69","endLine":15,"endColumn":24},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'useMutation' is defined but never used.","'loading' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]