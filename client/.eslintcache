[{"/Users/leabryant/Desktop/connect-able/client/src/index.js":"1","/Users/leabryant/Desktop/connect-able/client/src/App.js":"2","/Users/leabryant/Desktop/connect-able/client/src/pages/Signup.js":"3","/Users/leabryant/Desktop/connect-able/client/src/pages/Profile.js":"4","/Users/leabryant/Desktop/connect-able/client/src/pages/Home.js":"5","/Users/leabryant/Desktop/connect-able/client/src/utils/mutations.js":"6","/Users/leabryant/Desktop/connect-able/client/src/utils/auth.js":"7","/Users/leabryant/Desktop/connect-able/client/src/components/Footer.js":"8","/Users/leabryant/Desktop/connect-able/client/src/components/Login.js":"9","/Users/leabryant/Desktop/connect-able/client/src/components/Header.js":"10","/Users/leabryant/Desktop/connect-able/client/src/components/Nav.js":"11"},{"size":268,"mtime":1665949315810,"results":"12","hashOfConfig":"13"},{"size":1029,"mtime":1665949315809,"results":"14","hashOfConfig":"13"},{"size":10301,"mtime":1665954173740,"results":"15","hashOfConfig":"13"},{"size":295,"mtime":1665957672659,"results":"16","hashOfConfig":"13"},{"size":334,"mtime":1665958235358,"results":"17","hashOfConfig":"13"},{"size":1614,"mtime":1665947587825,"results":"18","hashOfConfig":"13"},{"size":1033,"mtime":1665854695204,"results":"19","hashOfConfig":"13"},{"size":348,"mtime":1665954173739,"results":"20","hashOfConfig":"13"},{"size":3343,"mtime":1665954173739,"results":"21","hashOfConfig":"13"},{"size":369,"mtime":1665955022568,"results":"22","hashOfConfig":"13"},{"size":332,"mtime":1665958144510,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"j87s2m",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/leabryant/Desktop/connect-able/client/src/index.js",[],["50","51"],"/Users/leabryant/Desktop/connect-able/client/src/App.js",["52"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\n          <Routes>\n            <Route \n              path=\"/\" \n              element={<Home />}\n            />\n            <Route \n              path=\"/profile\" \n              element={<Profile />}\n            />\n            <Route \n              path=\"/signup\" \n              element={<Signup />}\n            />\n          </Routes>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\n\nexport default App;","/Users/leabryant/Desktop/connect-able/client/src/pages/Signup.js",["53"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { NEW_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\nimport '../style.css'\n\nconst Signup = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ \n    username: '', \n    email: '', \n    password: '',\n    name: '',\n    lookingForLove: '',\n    lookingForFriends:'',\n    DOB: '',\n    gender: '',\n    orientation: '',\n    location: '',\n    aboutMe: '',\n    interests: '',\n    selfIdentify: '',\n    disability: ''\n    });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [newUser, { error }] = useMutation(NEW_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await newUser({\n        variables: { ...userFormData },\n      });\n      \n      if (!{ data }) {\n        throw new Error('something went wrong!');\n      }\n      Auth.login(data.newUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n        username: '', \n        email: '',\n        name: '', \n        password: '',\n        lookingForLove: '',\n        lookingForFriends:'',\n        DOB: '',\n        gender: '',\n        orientation: '',\n        location: '',\n        aboutMe: '',\n        interests: '',\n        selfIdentify: '',\n        disability: ''\n    });\n  };\n  const mystyle = {\n    color: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Arial\",\n    background: \"gray\",\n  };\n\n  \n  return (\n    <>\n    <div style={mystyle}>\n\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n        <Form.Group >\n          <Form.Label htmlFor='name'>Name:</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your Name'\n            name='name'\n            onChange={handleInputChange}\n            value={userFormData.name}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Name is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group >\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Your Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Minimum of 8 Characters'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForLove'>Are you Looking for Love?</Form.Label>\n          {['radio'].map((type) => (\n        <div key={`inline-${type}`} className=\"mb-3\">\n          <Form.Check\n            inline\n            label=\"Yes\"\n            name=\"group1\"\n            type={type}\n            id={`inline-${type}-1`}\n          />\n          <Form.Check\n            inline\n            label=\"No\"\n            name=\"group1\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n        </div>\n      ))}\n         <Form.Control.Feedback type='invalid'>Looking for Love is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='lookingForFriends'>Are you Looking for Friends?</Form.Label>\n          {['radio'].map((type) => (\n        <div key={`inline-${type}`} className=\"mb-3\">\n          <Form.Check\n            inline\n            label=\"Yes\"\n            name=\"group2\"\n            type={type}\n            id={`inline-${type}-1`}\n          />\n          <Form.Check\n            inline\n            label=\"No\"\n            name=\"group2\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n        </div>\n      ))}\n         <Form.Control.Feedback type='invalid'>Looking for Friends is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='DOB'>Date of Birth</Form.Label>\n          <Form.Control\n            type='DOB'\n            placeholder='mm/dd/yyyy'\n            name='DOB'\n            onChange={handleInputChange}\n            value={userFormData.DOB}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Date of Birth is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n        <Form.Label htmlFor='gender'>What is your Gender?</Form.Label>\n          {['radio'].map((type) => (\n        <div key={`inline-${type}`} className=\"mb-3\">\n          <Form.Check\n            inline\n            label=\"Man\"\n            name=\"group3\"\n            type={type}\n            id={`inline-${type}-1`}\n          />\n          <Form.Check\n            inline\n            label=\"Woman\"\n            name=\"group3\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n          <Form.Check\n            inline\n            label=\"Non-binary/non-conforming\"\n            name=\"group3\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n          <Form.Check\n            inline\n            label=\"Transgender\"\n            name=\"group3\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n          <Form.Check\n            inline\n            label=\"Prefer not to respond\"\n            name=\"group3\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n        </div>\n      ))}\n         <Form.Control.Feedback type='invalid'>Gender is required!</Form.Control.Feedback>\n      </Form.Group>\n\n      <Form.Group>\n          <Form.Label htmlFor='orientation'>Orientation</Form.Label>\n          <Form.Control\n            type='orientation'\n            placeholder='orientation'\n            name='orientation'\n            onChange={handleInputChange}\n            value={userFormData.orientation}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Orientation is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='location'>Where do you live?</Form.Label>\n          <Form.Control\n            type='location'\n            placeholder='City, State'\n            name='location'\n            onChange={handleInputChange}\n            value={userFormData.location}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Location is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='aboutMe'>Tell us About Yourself!</Form.Label>\n          <Form.Control\n            type='aboutMe'\n            placeholder='About Me'\n            name='aboutMe'\n            onChange={handleInputChange}\n            value={userFormData.aboutMe}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>About Me is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='interests'>Tell us about your interests!</Form.Label>\n          <Form.Control\n            type='interests'\n            placeholder='interests'\n            name='interests'\n            onChange={handleInputChange}\n            value={userFormData.interests}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Interests are required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='selfIdentify'>Do you want to identify your impairment?</Form.Label>\n          {['radio'].map((type) => (\n        <div key={`inline-${type}`} className=\"mb-3\">\n          <Form.Check\n            inline\n            label=\"Yes\"\n            name=\"group4\"\n            type={type}\n            id={`inline-${type}-1`}\n          />\n          <Form.Check\n            inline\n            label=\"No\"\n            name=\"group4\"\n            type={type}\n            id={`inline-${type}-2`}\n          />\n        </div>\n      ))}\n         <Form.Control.Feedback type='invalid'>You must answer yes or no to identifying your impairment!</Form.Control.Feedback>\n        </Form.Group>\n\n        {/* <Form.Group>\n          <Form.Label htmlFor='disability'>Tell us about your interests!</Form.Label>\n          <Form.Control\n            type='disability'\n            placeholder='disability'\n            name='disability'\n            onChange={handleInputChange}\n            value={userFormData.interests}\n            required\n          />\n        </Form.Group> */}\n\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      </div>\n    </>\n  );\n};\n\nexport default Signup;","/Users/leabryant/Desktop/connect-able/client/src/pages/Profile.js",[],"/Users/leabryant/Desktop/connect-able/client/src/pages/Home.js",[],"/Users/leabryant/Desktop/connect-able/client/src/utils/mutations.js",[],"/Users/leabryant/Desktop/connect-able/client/src/utils/auth.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Footer.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Login.js",["54"],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\n// import { loginUser } from '../utils/API';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Login = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(userFormData);\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  const mystyle = {\n    color: \"white\",\n    padding: \"10px\",\n    fontFamily: \"Arial\"\n  };\n  const button = {\n    color: \"white\",\n    backgroundColor: \"Gray\",\n    padding: \"10px\",\n    fontFamily: \"Arial\"\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group style={mystyle}>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group style={mystyle}>\n        <Button\n          style={button}\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n        </Form.Group>\n\n        <Form.Group style={mystyle} >\n        <Button\n          style={button}\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Not a Member? Register Now\n        </Button>\n        </Form.Group>\n      </Form>\n    </>\n  );\n};\n\nexport default Login;","/Users/leabryant/Desktop/connect-able/client/src/components/Header.js",[],"/Users/leabryant/Desktop/connect-able/client/src/components/Nav.js",["55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":50,"nodeType":"62","messageId":"63","endLine":2,"endColumn":54},{"ruleId":"60","severity":1,"message":"64","line":33,"column":21,"nodeType":"62","messageId":"63","endLine":33,"endColumn":26},{"ruleId":"60","severity":1,"message":"64","line":13,"column":19,"nodeType":"62","messageId":"63","endLine":13,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":15,"column":5,"nodeType":"67","endLine":15,"endColumn":38},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]